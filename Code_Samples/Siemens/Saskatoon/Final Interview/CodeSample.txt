assertEqual(a, b): Checks if a is equal to b.
assertNotEqual(a, b): Checks if a is not equal to b.
assertTrue(x): Checks if the boolean value of x is True.
assertFalse(x): Checks if the boolean value of x is False.
assertIs(a, b): Checks if a is the same object as b.
assertIsNot(a, b): Checks if a is not the same object as b.
assertIsNone(x): Checks if x is None.
assertIsNotNone(x): Checks if x is not None.
assertIn(a, b): Checks if a is an element of the container b.
assertNotIn(a, b): Checks if a is not an element of the container b.
assertIsInstance(a, b): Checks if a is an instance of the class b or a subclass thereof.
assertNotIsInstance(a, b): Checks if a is not an instance of the class b nor a subclass thereof.
assertRaises(exception, callable, *args, **kwargs): Checks if the given callable (function, method, etc.) raises a specific exception when called with the provided arguments and keyword arguments.
assertRaisesRegex(exception, regex, callable, *args, **kwargs): Similar to assertRaises, but also checks if the exception message matches the given regular expression regex.
assertAlmostEqual(a, b, places=None, msg=None, delta=None): Checks if a and b are approximately equal up to the given number of decimal places or within a given delta.
assertNotAlmostEqual(a, b, places=None, msg=None, delta=None): Checks if a and b are not approximately equal up to the given number of decimal places or within a given delta.
int(3.5)  # Output: 3
int("42")  # Output: 42
int(True)  # Output: 1
float(3)    # Output: 3.0
float("3.5")  # Output: 3.5
float(True)  # Output: 1.0
str(42)    # Output: "42"
str(3.14)  # Output: "3.14"
str(True)  # Output: "True"
bool(1)       # Output: True
bool(0)       # Output: False
bool("hello") # Output: True
bool("")      # Output: False
list("hello")  # Output: ['h', 'e', 'l', 'l', 'o']
list((1, 2, 3))  # Output: [1, 2, 3]
tuple("hello")  # Output: ('h', 'e', 'l', 'l', 'o')
tuple([1, 2, 3])  # Output: (1, 2, 3)
set("hello")  # Output: {'h', 'e', 'l', 'o'}
set([1, 2, 2, 3, 3, 3])  # Output: {1, 2, 3}
dict([(1, "one"), (2, "two"), (3, "three")])  # Output: {1: 'one', 2: 'two', 3: 'three'}
ord("A")  # Output: 65
chr(65)  # Output: "A"



